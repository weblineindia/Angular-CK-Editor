{"version":3,"file":"angular-editor.component.d.ts","sources":["angular-editor.component.d.ts"],"names":[],"mappingssourcesContent":["import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, OnInit, Renderer2 } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { AngularEditorConfig } from './config';\nimport { AngularEditorToolbarComponent } from './angular-editor-toolbar.component';\nimport { AngularEditorService } from './angular-editor.service';\nimport { DomSanitizer } from '@angular/platform-browser';\nexport declare class AngularEditorComponent implements OnInit, ControlValueAccessor, AfterViewInit, OnDestroy {\n    private r;\n    private editorService;\n    private doc;\n    private sanitizer;\n    private cdRef;\n    private autoFocus;\n    private onChange;\n    private onTouched;\n    modeVisual: boolean;\n    showPlaceholder: boolean;\n    disabled: boolean;\n    focused: boolean;\n    touched: boolean;\n    changed: boolean;\n    focusInstance: any;\n    blurInstance: any;\n    id: string;\n    config: AngularEditorConfig;\n    placeholder: string;\n    tabIndex: number | null;\n    html: any;\n    textArea: ElementRef;\n    editorWrapper: ElementRef;\n    editorToolbar: AngularEditorToolbarComponent;\n    viewMode: EventEmitter<boolean>;\n    /** emits `blur` event when focused out from the textarea */\n    blurEvent: EventEmitter<FocusEvent>;\n    /** emits `focus` event when focused in to the textarea */\n    focusEvent: EventEmitter<FocusEvent>;\n    tabindex: number;\n    onFocus(): void;\n    constructor(r: Renderer2, editorService: AngularEditorService, doc: any, sanitizer: DomSanitizer, cdRef: ChangeDetectorRef, defaultTabIndex: string, autoFocus: any);\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    /**\n     * Executed command from editor header buttons\n     * @param command string from triggerCommand\n     */\n    executeCommand(command: string): void;\n    /**\n     * focus event\n     */\n    onTextAreaFocus(event: FocusEvent): void;\n    /**\n     * @description fires when cursor leaves textarea\n     */\n    onTextAreaMouseOut(event: MouseEvent): void;\n    /**\n     * blur event\n     */\n    onTextAreaBlur(event: FocusEvent): void;\n    /**\n     *  focus the text area when the editor is focused\n     */\n    focus(): void;\n    /**\n     * Executed from the contenteditable section while the input property changes\n     * @param element html element from contenteditable\n     */\n    onContentChange(element: HTMLElement): void;\n    /**\n     * Set the function to be called\n     * when the control receives a change event.\n     *\n     * @param fn a function\n     */\n    registerOnChange(fn: any): void;\n    /**\n     * Set the function to be called\n     * when the control receives a touch event.\n     *\n     * @param fn a function\n     */\n    registerOnTouched(fn: any): void;\n    /**\n     * Write a new value to the element.\n     *\n     * @param value value to be executed when there is a change in contenteditable\n     */\n    writeValue(value: any): void;\n    /**\n     * refresh view/HTML of the editor\n     *\n     * @param value html string from the editor\n     */\n    refreshView(value: string): void;\n    /**\n     * toggles placeholder based on input string\n     *\n     * @param value A HTML string from the editor\n     */\n    togglePlaceholder(value: boolean): void;\n    /**\n     * Implements disabled state for this element\n     *\n     * @param isDisabled Disabled flag\n     */\n    setDisabledState(isDisabled: boolean): void;\n    /**\n     * toggles editor mode based on bToSource bool\n     *\n     * @param bToSource A boolean value from the editor\n     */\n    toggleEditorMode(bToSource: boolean): void;\n    /**\n     * toggles editor buttons when cursor moved or positioning\n     *\n     * Send a node array from the contentEditable of the editor\n     */\n    exec(): void;\n    private configure;\n    getFonts(): {\n        label: string;\n        value: string;\n    }[];\n    getCustomTags(): string;\n    ngOnDestroy(): void;\n    filterStyles(html: string): string;\n}\n"]}