{"version":3,"file":"angular-editor.service.d.ts","sources":["angular-editor.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { HttpClient, HttpEvent } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { CustomClass } from './config';\nexport interface UploadResponse {\n    imageUrl: string;\n}\nexport declare class AngularEditorService {\n    private http;\n    private doc;\n    savedSelection: Range | null;\n    selectedText: string;\n    uploadUrl: string;\n    uploadWithCredentials: boolean;\n    constructor(http: HttpClient, doc: any);\n    /**\n     * Executed command from editor header buttons exclude toggleEditorMode\n     * @param command string from triggerCommand\n     */\n    executeCommand(command: string): void;\n    /**\n     * Create URL link\n     * @param url string from UI prompt\n     */\n    createLink(url: string): void;\n    /**\n     * insert color either font or background\n     *\n     * @param color color to be inserted\n     * @param where where the color has to be inserted either text/background\n     */\n    insertColor(color: string, where: string): void;\n    /**\n     * Set font name\n     * @param fontName string\n     */\n    setFontName(fontName: string): void;\n    /**\n     * Set font size\n     * @param fontSize string\n     */\n    setFontSize(fontSize: string): void;\n    /**\n     * Create raw HTML\n     * @param html HTML string\n     */\n    insertHtml(html: string): void;\n    /**\n     * save selection when the editor is focussed out\n     */\n    saveSelection: () => void;\n    /**\n     * restore selection when the editor is focused in\n     *\n     * saved selection when the editor is focused out\n     */\n    restoreSelection(): boolean;\n    /**\n     * setTimeout used for execute 'saveSelection' method in next event loop iteration\n     */\n    executeInNextQueueIteration(callbackFn: (...args: any[]) => any, timeout?: number): void;\n    /** check any selection is made or not */\n    private checkSelection;\n    /**\n     * Upload file to uploadUrl\n     * @param file The file\n     */\n    uploadImage(file: File): Observable<HttpEvent<UploadResponse>>;\n    /**\n     * Insert image with Url\n     * @param imageUrl The imageUrl.\n     */\n    insertImage(imageUrl: string): void;\n    setDefaultParagraphSeparator(separator: string): void;\n    createCustomClass(customClass: CustomClass): void;\n    insertVideo(videoUrl: string): void;\n    private insertYouTubeVideoTag;\n    private insertVimeoVideoTag;\n    nextNode(node: any): any;\n    getRangeSelectedNodes(range: any, includePartiallySelectedContainers: any): any[];\n    getSelectedNodes(): any[];\n    replaceWithOwnChildren(el: any): void;\n    removeSelectedElements(tagNames: any): void;\n}\n"]}